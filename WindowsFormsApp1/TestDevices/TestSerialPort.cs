using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
//using System.Threading.Tasks;

/*
 * Driven by the client
 * 
 * When they write to me, I plan a response and set the buffer
 * 
 */

namespace MotorController
{
    public class TestSerialPort
    {
        struct State
        {
            public int running; //0=stopped,1=running,2=lockable,3=triggered
            public float p;
            public float i;
            public float d;
            public bool locked;
            public float target_f;
            public long min;
            public long max;
        };

        float NOISELEVEL = 50.0f;

        int _PulseDelay = 0;
        public int PulseDelay
        {
            get
            {
                if (!state.locked) _PulseDelay = r.Next(0, 100);
                return _PulseDelay;
            }
        }

        List<double> f = new List<double>() { 10.9, 16.95, 21.2, 22.01, 22.23, 22.18, 21.99, 21.95, 22.07, 22.11, 22.17, 22.23, 22.08, 21.94, 21.93, 21.95, 21.94, 21.93, 21.93, 22, 22, 22.07, 22.13, 22.13, 22.06, 21.92, 21.89, 21.94, 21.95, 21.97, 22.49, 23.34, 23.4, 23.11, 22.74, 22.81, 23.07, 23.12, 23.02, 22.92, 22.91, 22.98, 22.99, 23.04, 22.9, 22.98, 23.03, 23, 23.02, 23.06, 22.96, 23.04, 23.05, 22.99, 23.01, 22.98, 23.06, 23.09, 23.03, 23.01, 23.59, 24.35, 24.44, 24.12, 23.8, 23.76, 24.01, 24.18, 24.17, 24.19, 24.03, 24, 23.96, 24.01, 23.96, 23.88, 23.92, 23.96, 24.06, 24.09, 24.11, 24.01, 23.94, 23.97, 23.96, 23.96, 24, 24.03, 23.98, 23.9, 23.88, 23.88, 23.88, 23.88, 23.88, 24.06, 24.32, 24.17, 24.01, 23.92, 23.88, 23.97, 24.1, 24.06, 24, 23.96, 23.96, 23.98, 23.95, 24.03, 24.08, 23.99, 24, 24.06, 24.08, 24.04, 23.95, 23.85, 23.92, 24.09, 24.11, 24.02, 23.86, 23.8, 23.92, 23.92, 23.92, 23.92, 23.92, 24.13, 23.96, 23.98, 23.95, 23.97, 24.16, 24.19, 24.08, 24.03, 23.85, 23.84, 23.92, 23.92, 24.02, 24.14, 24.14, 24.15, 24.24, 24.24, 24.12, 24.02, 23.93, 23.84, 23.78, 23.75, 23.72, 23.94, 24.16, 24.19, 24.63, 25.09, 25.15, 25.05, 24.97, 25.01, 25.01, 24.95, 24.98, 25.06, 25.03, 25.03, 25.01, 25.01, 25.05, 25, 24.97, 25.02, 24.99, 24.94, 25.05, 25, 25.07, 24.99, 24.97, 25.05, 25.02, 25.04, 25, 24.97, 24.97, 24.97, 24.97, 24.97, 24.97, 25, 25.01, 25.07, 25.12, 25.08, 25.12, 25.14, 25.12, 25.07, 25.04, 25.01, 24.96, 25.01, 24.99, 25, 25.03, 25.06, 25.06, 24.94, 25.01, 24.98, 24.94, 25.06, 25, 25, 24.94, 24.96, 25.01, 25.05, 24.95, 25.77, 26.36, 26.23, 25.94, 25.87, 25.96, 26.02, 26.07, 25.99, 26.02, 25.97, 26.01, 26.04, 26.01, 25.97, 25.92, 26, 26.02, 25.99, 25.99, 25.94, 25.97, 26.06, 26.04, 26.02, 25.94, 25.93, 25.9, 26, 26, 26.84, 27.27, 27.11, 27.06, 27.05, 27.07, 27.05, 26.98, 27, 26.96, 27, 27.07, 26.97, 27.02, 27.01, 27.02, 27.02, 26.98, 26.98, 26.97, 27.02, 27.04, 26.99, 27.01, 27.01, 27.04, 27.07, 27.08, 27.1, 27.07, 27.07, 27.07, 27.07, 27.07, 27.11, 27.06, 26.97, 26.99, 27.05, 27.01, 26.98, 26.98, 26.99, 26.99, 27.01, 27.01, 26.97, 27.02, 26.99, 27, 26.97, 27.03, 27.06, 27.02, 27.07, 26.96, 26.96, 26.97, 27.02, 27, 26.96, 27.01, 27.04, 26.98, 27.67, 27.95, 28.04, 28.04, 28, 28.04, 28.05, 28.06, 28.07, 28, 28.01, 28.02, 28.05, 27.95, 27.92, 27.94, 28.03, 28.01, 27.94, 27.97, 27.97, 27.99, 28.01, 27.96, 27.97, 28.02, 28.03, 27.98, 28, 28.75, 28.73, 28.93, 28.97, 29.01, 29.04, 29.01, 29, 29.04, 29.04, 28.99, 29, 28.96, 29.02, 29.02, 29.02, 29.02, 29.02, 29.02, 28.98, 28.99, 28.97, 28.96, 28.96, 28.91, 28.96, 29.01, 28.99, 29.04, 29.3, 29.79, 29.79, 29.89, 29.94, 29.98, 30.02, 30.01, 30.04, 30.01, 30.02, 30.06, 30, 29.95, 30, 29.99, 30.03, 30.04, 30.05, 30.1, 30.09, 30.02, 29.99, 30.03, 30.08, 30.02, 30, 29.99, 29.97, 30, 30.66, 30.82, 30.91, 30.92, 31.03, 31.01, 30.98, 31.01, 30.96, 31.03, 31.03, 30.98, 31.01, 30.98, 31.03, 31.03, 31.02, 30.99, 30.99, 31.05, 30.99, 30.99, 30.94, 30.98, 31.03, 31, 30.99, 31.01, 31.02, 31.63, 31.83, 31.93, 31.97, 31.94, 31.9, 31.8, 31.91, 31.99, 32, 32.04, 32.01, 31.99, 32.01, 32.03, 31.98, 31.97, 32.01, 32.03, 32.06, 32.11, 32.05, 32.02, 32.01, 32.05, 31.98, 32.02, 32.04, 31.98, 32.03, 32.03, 32.03, 32.03, 32.03, 32, 32.03, 32.02, 32.02, 31.92, 31.97, 31.99, 32.03, 32.1, 32.07, 32.04, 32.02, 31.98, 32.05, 31.97, 32.01, 32, 32.02, 31.97, 32.04, 32.07, 32.01, 31.97, 32.02, 32, 32.03, 32, 32.02, 31.99, 31.95, 31.93, 31.93, 31.93, 31.93, 31.93, 31.86, 32.01, 31.95, 31.99, 31.99, 32.04, 31.99, 31.99, 32.07, 32.01, 32.03, 32.03, 31.94, 31.93, 32, 31.94, 32.01, 32.03, 32.02, 32.01, 32.04, 32.02, 32.03, 32.04, 31.97, 31.92, 32.03, 31.95, 31.92, 31.96, 31.96, 31.96, 31.96, 31.96, 31.96, 31.88, 31.96, 31.96, 31.98, 31.96, 32.01, 31.98, 32.01, 32.02, 32.05, 32.04, 32.02, 31.96, 32.02, 32.01, 31.98, 32.02, 31.99, 31.99, 32, 32.01, 32.01, 32, 32.01, 32, 32.01, 32.02, 32.01, 32.01, 32.01, 32.01, 32.01, 32.01, 32.01, 31.98, 31.98, 32, 32.03, 32.02, 32.01, 31.96, 31.98, 32.03, 31.91, 32.01, 31.94, 31.92, 31.97, 31.92, 31.96, 31.79, 31.94, 31.93, 31.96, 31.93, 31.94, 31.97, 31.94, 31.96, 31.98, 31.97, 32.08, 31.98, 32.38, 32.93, 33.04, 32.99, 33.02, 33.13, 33.06, 33.1, 33.1, 33.02, 33.02, 33.01, 32.83, 32.94, 32.99, 33, 33.07, 33.03, 32.98, 32.98, 33.03, 33.04, 32.98, 33.06, 33.06, 32.99, 33.04, 32.98, 32.98, 32.97, 32.98, 32.98, 32.98, 32.98, 32.98, 33.03, 33, 33.05, 33.03, 33.05, 33.03, 33.06, 32.97, 32.93, 32.94, 32.99, 33.03, 33.01, 32.99, 33.07, 33.06, 33.01, 33.01, 33.08, 33.03, 33.08, 33.02, 33, 33.02, 32.96, 32.98, 33.01, 32.92, 32.95, 32.98, 32.98, 32.98, 32.98, 32.98, 32.97, 33.04, 33.03, 33.1, 32.88, 32.95, 33, 32.99, 33, 32.96, 32.99, 33.01, 33.03, 33.04, 33.06, 33.07, 33.07, 33.04, 33.01, 33.05, 32.95, 32.92, 32.96, 32.94, 32.95, 32.97, 33.06, 33.06, 32.99, 32.99, 33.04, 33.04, 33.04, 33.04, 33.06, 33.04, 32.89, 32.96, 33.02, 32.98, 32.88, 32.9, 33.05, 33.03, 33.02, 33.07, 32.96, 32.74, 32.93, 33, 33.14, 33.13, 33.02, 33.07, 33.06, 33.05, 33.03, 33.14, 33.13, 33.02, 32.96, 32.99, 32.96, 33.66, 33.86, 34.19, 34.14, 34.03, 34.06, 34.08, 34.04, 34.08, 33.57, 33.72, 34.29, 34.14, 34.04, 34, 34.05, 34.1, 34.06, 34.04, 34.07, 34.06, 34.03, 33.65, 33.9, 34.21, 34, 34.06, 34.07, 34.07, 33.93, 33.95, 33.95, 33.95, 33.95, 33.95, 34.23, 34.06, 34.03, 34.12, 34.08, 34, 33.72, 33.6, 33.79, 33.89, 34.01, 34.2, 34.1, 34.02, 34.07, 34.13, 34.08, 34.06, 34.07, 34.03, 34.05, 34.03, 34.06, 34.06, 34.06, 34.1, 34, 33.98, 34.06, 34.08, 34.08, 34.08, 34.08, 34.08, 34.01, 34.09, 33.64, 33.52, 33.81, 34.01, 34.1, 34.09, 34.04, 34.04, 34.09, 34.09, 33.99, 34.02, 33.57, 33.52, 33.83, 34.14, 34.14, 34.04, 34.13, 34.06, 34.02, 33.6, 33.73, 34.14, 34, 34.03, 34.03, 34.07, 34.07, 34.07, 34.07, 34.07, 34.01, 34.09, 34.01, 34.05, 33.63, 33.87, 34.19, 34.1, 34.1, 34.1, 34.05, 34.1, 33.6, 33.74, 34.2, 34.13, 34.05, 34.01, 34.05, 34.04, 33.62, 33.77, 33.98, 34.2, 34.13, 33.98, 33.64, 33.81, 33.9, 34.18, 34.18, 34.18, 34.18, 34.18, 34.05, 34.06, 34.09, 34.16, 34.06, 34.07, 33.59, 33.58, 33.73, 34.24, 34.07, 34, 34.16, 34.09, 34.05, 34.12, 34.11, 34.06, 34.06, 33.63, 33.58, 33.84, 34.26, 34.01, 34.02, 34.05, 34.09, 34.09, 34.07, 34.13, 34.14, 34.76, 35.1, 35.01, 34.99, 35.05, 35.07, 35.12, 34.97, 35.01, 35.04, 34.99, 35.02, 35.01, 35, 34.99, 35.08, 34.95, 35.05, 35.06, 35.1, 34.97, 34.94, 35.06, 35.02, 34.77, 35.07, 34.88, 35.11, 35.15, 35.15, 35.15, 35.15, 35.15, 34.96, 34.89, 34.98, 35, 34.99, 35.04, 35.04, 34.98, 35.08, 35.1, 35.05, 34.95, 35.03, 34.8, 34.74, 34.91, 34.79, 34.87, 34.97, 35.13, 35.23, 35.06, 35.04, 35, 35.01, 35.01, 35.07, 35.15, 35.05, 35.02, 35.02, 35.02, 35.02, 35.02, 34.95, 34.87, 34.84, 34.97, 35.1, 35.1, 34.75, 34.63, 34.76, 34.9, 35.12, 35.14, 35.14, 35, 35.06, 34.99, 34.96, 35.04, 35.04, 35.09, 35.04, 35.03, 35.05, 35.1, 35.12, 35.04, 35.05, 35.07, 35.05, 35.73, 35.81, 36.02, 36.01, 35.99, 36.02, 35.99, 36.03, 36.04, 35.95, 35.98, 36.12, 36.08, 36.01, 36.04, 35.97, 36.12, 36.12, 36.03, 36.02, 35.97, 36.01, 36.03, 35.79, 35.98, 36.11, 36, 35.96, 36.02, 36.02, 36.02, 36.02, 36.02, 36.02, 36, 35.99, 36, 36.02, 35.98, 36.03, 36.02, 36.01, 36.04, 36.03, 35.96, 35.9, 36.07, 36.06, 35.98, 36.01, 35.98, 36.04, 36.03, 36.13, 36, 36.06, 36.08, 36.03, 35.96, 35.99, 36.01, 36.01, 36.05, 36.05, 36.05, 36.05, 36.05, 36.02, 35.95, 35.99, 35.98, 36, 36.03, 35.99, 36.09, 36.03, 35.88, 36, 36.07, 35.92, 35.87, 35.99, 36.06, 36, 36.02, 36.08, 36.05, 36.01, 36.01, 36.01, 36.08, 36.03, 36.02, 36.09, 35.97, 35.86, 36.03, 36.62, 36.97, 36.97, 36.8, 36.98, 37, 36.99, 37.11, 37, 37.01, 36.98, 37.11, 36.98, 37.09, 36.85, 36.91, 37.02, 37.11, 36.98, 37.05, 37.09, 37.05, 36.86, 36.95, 37.03, 36.97, 36.97, 36.96, 36.98, 37.89, 38.02, 38.03, 37.83, 37.9, 37.98, 37.97, 37.96, 37.95, 38.02, 38.07, 37.97, 38.03, 37.99, 38.04, 38.07, 38.05, 38.03, 37.91, 37.98, 38.06, 38.02, 38.02, 37.96, 37.98, 38.03, 38.02, 38.57, 38.83, 38.86, 38.94, 39.02, 39.03, 38.93, 38.98, 38.97, 38.98, 39.01, 38.95, 38.98, 38.9, 38.94, 39.03, 39, 39.03, 39.02, 38.98, 38.94, 38.98, 38.97, 38.98, 39.09, 38.92, 38.95, 38.99, 38.98, 39.85, 40.1, 40.37, 40.21, 40.13, 39.98, 39.99, 40.05, 39.99, 39.96, 39.87, 39.97, 39.96, 40.01, 39.91, 39.76, 39.99, 40.14, 40.08, 40.05, 40.12, 40.13, 40.1, 40.03, 39.99, 40.11, 39.92, 39.98, 40.1, 40.61, 41.1, 41.13, 40.88, 40.94, 40.98, 40.95, 40.88, 41.03, 40.9, 41.03, 41.02, 41.01, 41.02, 41, 41.03, 40.98, 41.09, 40.96, 41.06, 41.04, 40.96, 41, 41.01, 40.94, 41, 41, 41.61, 42.32, 42.44, 42.23, 41.94, 41.93, 41.89, 41.97, 42.05, 42.05, 42.02, 42.02, 41.82, 41.77, 42.13, 42.17, 41.87, 41.88, 42.04, 42.02, 42.11, 42.12, 42.05, 41.98, 42.01, 42.04, 41.97, 41.93, };
        int p = 0;

        float _roto_freq = 0, t = 0, tt= 0;
        public double RotorFreq
        {
            get
            {
                t += 0.8f;
                float expected = (int)(state.target_f + 100 * (Math.Cos(t) / (Math.Pow(t - tt, 2) + 1)) + r.NextDouble());
                return (int)(_roto_freq += (expected - _roto_freq) / 50 * NOISELEVEL);
                //return f[(++p) % f.Count];

            }
        }

        State state = new State
        {
            running = 0,
            p = 0,
            i = 0,
            d = 0,
            locked = false,
            target_f = 0,
            min = (long)1E7,
            max = 0
        };

        public void Dispose(){}

        Random r = new Random();

        private MultiDeviceAIO.FmMain parentfm;

        private string buffer = "";

        public int BaudRate { get; set; }
        public string PortName { get; set; }

        public TestSerialPort(MultiDeviceAIO.FmMain parentfm)
        {
            this.parentfm = parentfm;
        }

        public bool IsOpen { get { return true; } }
        public void Open() { }
        public void DiscardInBuffer() { }
        public void Close() { }

        private void Send(string buf)
        {
            buffer = buf + "\n";
            parentfm.serialPort1_DataReceived(this, null);
        }


        int maxmin = 0;
        public void Write(string packet)
        {
            //What CMD did I just get asked to do
            //sim Dave's API
            string[] data = packet.Split(' ');
            Enums.CMDDecode.TryGetValue(data[0], out CMD cmd);

            switch (cmd)
            {
                case CMD.START:
                    state.locked = false;
                    state.running = 1;
                    //TODO: This cannot be done in 3.5 Find another way
                    Task task = Task.Delay(5000).ContinueWith(t => state.running = 2);
                    SendACK(cmd);
                    break;
                case CMD.STOP:
                    state.running = 0;
                    SendACK(cmd);
                    break;
                case CMD.SETLOCK:
                    //Can't lock until state = 2
                    if (state.running == 2)
                        state.locked = true;
                    SendACK(cmd);
                    break;
                case CMD.SETUNLOCK:
                    if (state.locked == true)
                        state.locked = false;
                    SendACK(cmd);
                    break;
                /*case CMD.SETPULSEDELAY:
                    _PulseDelay = int.Parse(data[1]);
                    SendACK(cmd);
                    break;*/
                /*case CMD.SETPID:
                    state.p = float.Parse(data[1]);
                    state.i = float.Parse(data[2]);
                    state.d = float.Parse(data[3]);
                    SendACK(cmd);
                    break;
                    */
                case CMD.SETFREQ:
                    tt = t;
                    state.target_f = int.Parse(data[1]);
                    SendACK(cmd);
                    break;

                // NO ACK
                case CMD.GETTARGETFREQ:
                    Send("FW " + state.target_f);
                    break;
                case CMD.GETROTORFREQ:
                    Send("CF " + RotorFreq);
                    break;
/*                case CMD.GETPULSEDELAY:
                    Send("PW " + PulseDelay);
                    break;*/
                case CMD.GETPID:
                    Send(String.Format("PID {0} {1} {2}", (float)r.NextDouble(), (float)r.NextDouble(), (float)r.NextDouble()));
                    //Send(String.Format("PID {0} {1} {2}", state.p, state.i, state.d));
                    break;
/*                case CMD.GETMINMAXPERIODS:
                    if (maxmin++ > 5)
                    {
                        state.min = r.Next(0, 10);
                        state.max = r.Next(0, 10);
                    }

                    Send(String.Format("MM {0} {1}", state.min, state.max));

                    break;*/
                case CMD.GETLOCKABLE:
                    //If state.running = 2 then lockable. Answer true
                    Send(String.Format("TL {0}", state.running == 2));
                    break;

                //NEW

                case CMD.TRIGGER:
                    SendACK(cmd);
                    break;
                case CMD.SETADC:
                    //Do something with int.Parse(data[1]);
                    SendACK(cmd);
                    break;
                case CMD.GETADC:
                    Send(String.Format("RA {0}", 2001));
                    break;

                default:
                    parentfm.Msg("Unknown packet: " + cmd);
                    break;

            }
            //SendLine("CF " + r.Next(0,100).ToString() );

        }
        //NEW
        void SendACK(CMD cmd)
        {
            Enums.CMDEncode.TryGetValue(cmd, out string str);
            Send("ACK " + str);
        }
        //
        public string ReadLine()
        {
            return buffer;
        }

        public string[] GetPortNames()
        {
            return new string[] { "COM6" };
        }
    }
}
